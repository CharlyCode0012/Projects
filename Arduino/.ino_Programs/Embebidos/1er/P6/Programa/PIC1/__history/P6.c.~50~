/*#include <16F877.h>
#fuses NOWDT, HS, NOLVP
#device ADC=10
#use delay (clock=4M)

#byte TRISA=0x85
#byte PORTA=0x05
#byte TRISC=0x87
#byte PORTC=0x07
#byte TRISD=0x88
#byte PORTD=0x08

#use RS232(BAUD = 62500, XMIT = PIN_C6, RCV = PIN_C7)   //baudios 62500 bits por seg, Tx= c6    Rx = C7
#include <lcd.c>
//#use fast_io(A)
//#use fast_io(C)
//#use fast_io(D)

void main()
{
   setup_adc(ADC_CLOCK_INTERNAL);                 // ADC Module uses its internal oscillator
   setup_adc_ports(AN0);                          // Configure AN0 pin as analog
   set_adc_channel(0); //Seleccionar Canal 0 para sensor de Temperatura  
   delay_us(20);
   lcd_init();
   int16 valord = 0; 
   float temper;

}*/


/*
 * Interfacing PIC16F877A microcontroller with 1602 LCD and
 *  LM335 analog temperature sensor.
 * C Code for CCS C compiler.
 * This is a free software with NO WARRANTY.
 * https://simple-circuit.com/
 */
 

 
#include <16F877A.h>
#fuses HS,NOWDT,NOPROTECT,NOLVP
#device ADC=10
#use delay(clock = 4MHz)
#include <lcd.c>
 
char message1[] = "Temp =  00.0 C";
char message2[] =      "=  00.0 K";
signed int16 Kelvin, Celsius;
void main(){
  setup_adc(ADC_CLOCK_INTERNAL);                 // ADC Module uses its internal oscillator
  setup_adc_ports(AN0);                          // Configure AN0 pin as analog
  set_adc_channel(0);                            // Select channel 0 (AN0)
  lcd_init();                                    // Initialize LCD module
  lcd_putc('\f');                                // Clear LCD
  while(TRUE){
    delay_ms(1000);
    Kelvin = read_adc() * 0.489;                 // Read analog voltage and convert it to Kelvin (0.489 = 500/1023)
    Celsius = Kelvin - 273;                      // Convert Kelvin to degree Celsius
    if(Celsius < 0){
      Celsius = abs(Celsius);                    // Absolute value
      message1[7] = '-';                         // Put minus '-' sign
    }
    else
      message1[7]  = ' ';                        // Put space ' '
    if (Celsius > 99)
      message1[7]  = 1 + 48;                     // Put 1 (of hundred)
    message1[8]  = (Celsius / 10) % 10  + 48;
    message1[9]  =  Celsius % 10  + 48;
    message1[12] = 223;                          // Degree symbol
    message2[2]  = (Kelvin / 100) % 10 + 48;
    message2[3]  = (Kelvin / 10) % 10 + 48;
    message2[4] = Kelvin % 10 + 48;
    lcd_gotoxy(1, 1);                            // Go to column 1 row 1
    printf(lcd_putc, message1);                  // Display message1
    lcd_gotoxy(6, 2);                            // Go to column 6 row 2
    printf(lcd_putc, message2);                  // Display message2
  }
}
